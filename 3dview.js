let scene,camera,renderer,group;const faceOrder=['front','right','back','left','top','bottom'];let currentFaceIndex=0;const panelWidth=24;const panelHeight=13.5;const spacing=20;const panels={front:{position:[0,0,spacing],rotation:[0,0,0],normal:new THREE.Vector3(0,0,1),texture:'dice-images/1.png',uv:[0,1,1,1,0,0,1,0]},back:{position:[0,0,-spacing],rotation:[0,Math.PI,0],normal:new THREE.Vector3(0,0,-1),texture:'dice-images/2.png',uv:[1,1,0,1,1,0,0,0]},left:{position:[-spacing,0,0],rotation:[0,Math.PI/2,0],normal:new THREE.Vector3(-1,0,0),texture:'dice-images/5.png',uv:[0,1,1,1,0,0,1,0]},right:{position:[spacing,0,0],rotation:[0,-Math.PI/2,0],normal:new THREE.Vector3(1,0,0),texture:'dice-images/6.png',uv:[1,1,0,1,1,0,0,0]},top:{position:[0,spacing/1.5,0],rotation:[-Math.PI/2,0,0],normal:new THREE.Vector3(0,1,0),texture:'dice-images/3.png',uv:[0,0,1,0,0,1,1,1]},bottom:{position:[0,-spacing/1.5,0],rotation:[Math.PI/2,0,0],normal:new THREE.Vector3(0,-1,0),texture:'dice-images/4.png',uv:[0,1,1,1,0,0,1,0]}};function init(){scene=new THREE.Scene();camera=new THREE.PerspectiveCamera(35,window.innerWidth/window.innerHeight,1,1000);renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0});renderer.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(renderer.domElement);const textureLoader=new THREE.TextureLoader();group=new THREE.Group();Object.keys(panels).forEach(face=>{const panel=panels[face];const geometry=new THREE.PlaneGeometry(panelWidth,panelHeight);geometry.setAttribute('uv',new THREE.Float32BufferAttribute(panel.uv,2));const material=new THREE.MeshBasicMaterial({map:textureLoader.load(panel.texture),transparent:!0,side:THREE.DoubleSide});const mesh=new THREE.Mesh(geometry,material);mesh.position.set(...panel.position);mesh.rotation.set(...panel.rotation);group.add(mesh)});scene.add(group);camera.position.set(0,0,50);rotateToFace('front')} function rotateToFace(targetFace){const targetPanel=panels[targetFace];const targetQuaternion=new THREE.Quaternion().setFromUnitVectors(camera.position.clone().normalize(),targetPanel.normal.clone().applyQuaternion(group.quaternion).normalize());new TWEEN.Tween(group.scale).to({x:0.95,y:0.95,z:0.95},500).easing(TWEEN.Easing.Quartic.Out).chain(new TWEEN.Tween(group.quaternion).to(targetQuaternion,1500).easing(TWEEN.Easing.Quadratic.Out).chain(new TWEEN.Tween(group.scale).to({x:1,y:1,z:1},800).easing(TWEEN.Easing.Quartic.Out).onComplete(()=>{setTimeout(()=>{currentFaceIndex=(currentFaceIndex+1)%faceOrder.length;if(currentFaceIndex==0)currentFaceIndex=1 rotateToFace(faceOrder[currentFaceIndex]);console.log(currentFaceIndex)},8000)}))).start()} function animate(){requestAnimationFrame(animate);TWEEN.update();renderer.render(scene,camera)} init();animate()